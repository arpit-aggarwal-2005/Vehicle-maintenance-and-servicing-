# -*- coding: utf-8 -*-
"""Arpit_102203306_digvijay_102203218.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eeCdyfJi3qkiebOP-CWaqQg6TK9PwEqV
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import accuracy_score, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv("Vehicle Maintenance- Service Records.csv")  # Replace with the path to your dataset

# Data Preprocessing
# Define the columns for components and target variables
component_columns = [
    'oil_filter', 'engine_oil', 'washer_plug_drain', 'dust_and_pollen_filter',
    'whell_alignment_and_balancing', 'air_clean_filter', 'fuel_filter',
    'spark_plug', 'brake_fluid', 'brake_and_clutch_oil', 'transmission_fluid',
    'brake_pads', 'clutch', 'coolant'
]
target_components = data[component_columns]
target_cost = data['cost']

# Encoding categorical variables (if any)
data['vehicle_type'] = data['vehicle_type'].astype('category').cat.codes
data['brand'] = data['brand'].astype('category').cat.codes
data['region'] = data['region'].astype('category').cat.codes

# Combine features and components for cost prediction
features_with_components = data.drop(columns=['cost', 'slno', 'model', 'engine_type', 'make_year'])
features = features_with_components.drop(columns = target_components)

# Scale the features (necessary for KNN)
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)
scaled_features_with_components = scaler.fit_transform(features_with_components)

# Split the dataset into training and test sets
# Component prediction (using original features)
X_train_comp, X_test_comp, y_train_comp, y_test_comp = train_test_split(
    scaled_features, target_components, test_size=0.2, random_state=42
)

# Cost prediction (using both features and components)
X_train_cost, X_test_cost, y_train_cost, y_test_cost = train_test_split(
    scaled_features_with_components, target_cost, test_size=0.2, random_state=42
)

# Model for predicting components needing servicing

# Model for predicting servicing cost using KNN Regressor
cost_model = KNeighborsRegressor(n_neighbors=5, weights='distance')  # Using distance-weighted neighbors
cost_model.fit(X_train_cost, y_train_cost)

# Predictions
y_pred_cost = cost_model.predict(X_test_cost)

# Evaluation
cost_rmse = np.sqrt(mean_squared_error(y_test_cost, y_pred_cost))

# Calculate R² score
r2 = r2_score(y_test_cost, y_pred_cost)
print(f"R² Score: {r2:.2f}")
print(f"Cost Prediction RMSE: {cost_rmse:.2f}")

# Print the names of components needing servicing for each prediction


# Plotting the actual vs predicted costs

plt.scatter(y_test_cost, y_pred_cost, alpha=0.7)
plt.plot([min(y_test_cost), max(y_test_cost)], [min(y_test_cost), max(y_test_cost)], color='red', linestyle='--')
plt.xlabel("Actual Cost")
plt.ylabel("Predicted Cost")
plt.title("Actual vs Predicted Servicing Costs")
plt.show()


def fit_and_predict_cost(scaled_features_with_components, target_cost,
                         vehicle_type, brand, region, mileage_range, mileage,
                         oil_filter, engine_oil, washer_plug_drain, dust_and_pollen_filter,
                         whell_alignment_and_balancing, air_clean_filter, fuel_filter, spark_plug,
                         brake_fluid, brake_and_clutch_oil, transmission_fluid, brake_pads, clutch, coolant):
    """
    Fits the cost prediction model using scaled features and target cost,
    then predicts servicing cost for the given input data.
    """
    # Split the dataset
    X_train_cost, X_test_cost, y_train_cost, y_test_cost = train_test_split(
        scaled_features_with_components, target_cost, test_size=0.2, random_state=42
    )

    # Model Fitting
    cost_model = KNeighborsRegressor(n_neighbors=5, weights='distance')
    cost_model.fit(X_train_cost, y_train_cost)

    # Create input data for prediction
    input_data = pd.DataFrame([{
        'vehicle_type': vehicle_type,
        'brand': brand,
        'region': region,
        'mileage_range': mileage_range,
        'mileage': mileage,
        'oil_filter': oil_filter,
        'engine_oil': engine_oil,
        'washer_plug_drain': washer_plug_drain,
        'dust_and_pollen_filter': dust_and_pollen_filter,
        'whell_alignment_and_balancing': whell_alignment_and_balancing,
        'air_clean_filter': air_clean_filter,
        'fuel_filter': fuel_filter,
        'spark_plug': spark_plug,
        'brake_fluid': brake_fluid,
        'brake_and_clutch_oil': brake_and_clutch_oil,
        'transmission_fluid': transmission_fluid,
        'brake_pads': brake_pads,
        'clutch': clutch,
        'coolant': coolant
    }])

    # Encode categorical variables as in training
    categorical_columns = ['vehicle_type', 'brand', 'region', 'mileage_range']
    for col in categorical_columns:
        input_data[col] = input_data[col].astype('category').cat.codes

    # Scale the numeric inputs as in training
    input_data_scaled = scaler.transform(input_data)

    # Predict servicing cost
    predicted_cost = cost_model.predict(input_data_scaled)[0]

    # Evaluate the model (optional)
    y_pred_cost = cost_model.predict(X_test_cost)
    cost_rmse = np.sqrt(mean_squared_error(y_test_cost, y_pred_cost))
    r2 = r2_score(y_test_cost, y_pred_cost)
    print(f"Cost Prediction Model Evaluation:")
    print(f"RMSE: {cost_rmse:.2f}")
    print(f"R² Score: {r2:.2f}")

    return predicted_cost


import pandas as pd



def predict_service(vehicle_type, brand, region, mileage_range, mileage):
    # Create a DataFrame for the input
    input_data = pd.DataFrame([{
        'vehicle_type': vehicle_type,
        'brand': brand,
        'region': region,
        'mileage_range': mileage_range,
        'mileage': mileage
    }])

    # Match the encoding used during training
    input_data['vehicle_type'] = input_data['vehicle_type'].astype('category').cat.codes
    input_data['brand'] = input_data['brand'].astype('category').cat.codes
    input_data['region'] = input_data['region'].astype('category').cat.codes

    # Predict components needing servicing
    component_prediction = component_model.predict(input_data)
    component_names = [
        'oil_filter', 'engine_oil', 'washer_plug_drain', 'dust_and_pollen_filter',
        'whell_alignment_and_balancing', 'air_clean_filter', 'fuel_filter',
        'spark_plug', 'brake_fluid', 'brake_and_clutch_oil', 'transmission_fluid',
        'brake_pads', 'clutch', 'coolant'
    ]
    predicted_components = [component_names[i] for i, value in enumerate(component_prediction[0]) if value == 1]
    return predicted_components

def get_boolean_input(prompt):
    while True:
        response = input(prompt + " (yes/no): ").lower()
        if response in ['yes', 'y']:
            return True
        elif response in ['no', 'n']:
            return False
        print("Please enter 'yes' or 'no'")

def main():

  print("Enter vehicle details for servicing prediction:")

    # Common inputs for both predictions
  vehicle_type = input("Vehicle Type (e.g., 'car'): ")
  brand = input("Brand (e.g., 'honda'): ")
  region = input("Region (e.g., 'chennai'): ")
  mileage_range = input("Mileage Range (e.g., '10000-20000'): ")
  mileage = int(input("Actual Mileage (e.g., 11400): "))

  choice = int(input("Enter 1 to predict cost : "))



  if choice == 1:
    print("\nPlease indicate which components need servicing:")
    oil_filter = get_boolean_input("Oil Filter")
    engine_oil = get_boolean_input("Engine Oil")
    washer_plug_drain = get_boolean_input("Washer Plug Drain")
    dust_and_pollen_filter = get_boolean_input("Dust and Pollen Filter")
    whell_alignment_and_balancing = get_boolean_input("Wheel Alignment and Balancing")
    air_clean_filter = get_boolean_input("Air Clean Filter")
    fuel_filter = get_boolean_input("Fuel Filter")
    spark_plug = get_boolean_input("Spark Plug")
    brake_fluid = get_boolean_input("Brake Fluid")
    brake_and_clutch_oil = get_boolean_input("Brake and Clutch Oil")
    transmission_fluid = get_boolean_input("Transmission Fluid")
    brake_pads = get_boolean_input("Brake Pads")
    clutch = get_boolean_input("Clutch")
    coolant = get_boolean_input("Coolant")

    # Call the fit_and_predict_cost function
    cost = fit_and_predict_cost(
        scaled_features_with_components, target_cost,
        vehicle_type, brand, region, mileage_range, mileage,
        oil_filter, engine_oil, washer_plug_drain, dust_and_pollen_filter,
        whell_alignment_and_balancing, air_clean_filter, fuel_filter, spark_plug,
        brake_fluid, brake_and_clutch_oil, transmission_fluid, brake_pads, clutch, coolant
    )

    print(f"\nEstimated Servicing Cost: ₹{cost:.2f}")

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler

# Load the dataset
vehicle_records = pd.read_csv("Vehicle Maintenance- Service Records.csv")  # Replace with your dataset path

# Define the columns for components and target variables
service_components = [
    'oil_filter', 'engine_oil', 'washer_plug_drain', 'dust_and_pollen_filter',
    'whell_alignment_and_balancing', 'air_clean_filter', 'fuel_filter',
    'spark_plug', 'brake_fluid', 'brake_and_clutch_oil', 'transmission_fluid',
    'brake_pads', 'clutch', 'coolant'
]

# Select features for prediction
vehicle_features = [
    'vehicle_type', 'brand', 'mileage', 'mileage_range', 'engine_type', 'make_year', 'model'
]

# Apply one-hot encoding to categorical variables
X_data = pd.get_dummies(vehicle_records[vehicle_features], drop_first=True)

# Extract target variables
y_data = vehicle_records[service_components]

# Scale numerical features
data_scaler = StandardScaler()
X_scaled_data = data_scaler.fit_transform(X_data)

# Split dataset into training and testing sets
X_train_data, X_test_data, y_train_data, y_test_data = train_test_split(X_scaled_data, y_data, test_size=0.2, random_state=42)

# Train a Random Forest Classifier for each component using a loop
trained_models = {}
component_predictions = {}

print("\nTraining Models:")
for service in service_components:
    print(f"Training model for {service}...")
    trained_model = RandomForestClassifier(random_state=42)
    trained_model.fit(X_train_data, y_train_data[service])
    trained_models[service] = trained_model
    component_predictions[service] = trained_model.predict(X_test_data)

# Evaluate the models
print("\nEvaluation:")
for service in service_components:
    unique_class_counts = y_test_data[service].nunique()  # Check the number of unique classes
    print(f"\nComponent: {service}")
    if unique_class_counts > 1:
        model_accuracy = accuracy_score(y_test_data[service], component_predictions[service])
        print(f"Accuracy: {model_accuracy:.2f}")
        print(classification_report(y_test_data[service], component_predictions[service], target_names=['No', 'Yes']))
    else:
        print(f"Skipped evaluation for {service} because it has only one class in the test set.")

# Function to predict servicing requirements for a new vehicle
def predict_servicing(vehicle_details):
    """
    Predicts whether vehicle components need servicing based on input data.

    Parameters:
    vehicle_details (dict): A dictionary containing vehicle attributes.

    Returns:
    dict: A dictionary with component names as keys and predictions as values.
    """
    # Convert the input data into a DataFrame
    input_vehicle_data = pd.DataFrame([vehicle_details])

    # Apply one-hot encoding, aligning with training features
    input_encoded_data = pd.get_dummies(input_vehicle_data, drop_first=True)
    input_encoded_data = input_encoded_data.reindex(columns=X_data.columns, fill_value=0)

    # Scale the features
    input_scaled_data = data_scaler.transform(input_encoded_data)

    # Predict components needing servicing
    servicing_predictions = {}
    for service in service_components:
        servicing_predictions[service] = trained_models[service].predict(input_scaled_data)[0]

    return servicing_predictions

while(1):
  choice = int(input("""
  enter 1 if you want to predict the cost
  enter 2 if you want to predict the components to be serviced
  enter 0 if you want to exit

    """))
  if choice == 0:
    break


  if choice == 1:
    main()
  if choice==2:


# Example input for prediction
    new_vehicle_details = {
        'vehicle_type': input("vehicle_type:-   "),     # Example input
      'brand': input("brand:-   "),          # Example input
      'mileage': int(input("mileage:-   ")),          # Example input
      'mileage_range': int(input("mileage_range:-   ")),        # Example input
      'engine_type': input("engine_type:-   "),   # Example input
      'make_year': int(input("make_year:-   ")),         # Example input
      'model': input("model   ")           # Example input
}

# Make predictions for the new vehicle
    predicted_servicing = predict_servicing(new_vehicle_details)
    print("\nPredicted servicing requirements:")
    print(predicted_servicing)